SELECTION SORTING -> O(N^2) in Every Cases

outside loop n-1
    int miniidx = i;
inside loop j=i+1 to n
    if(arr[j]<arr[miniidx]){
      miniidx = j;
    }

if(minidx != i){
  swap(arr[i],arr[miniidx]);
}

Bubble Case : O(N^2) O(N^2) O(N)

i=0 to n-1
j=0 to n-i-1

if(arr[j]>arr[j+1]){
  swap(arr[j],arr[j+1]);
}

O(N^2)

FOR O(N) 

after first loop swapped = false
after every swapped = true

if(!swapped)
break;


INSERTION SORT O(N^2) O(N^2) O(N)

     for(int i=1;i<n;i++){
        int j = i-1;
        int key = arr[j];

       while(j>=0 && arr[j+1] > key){
          arr[j+1] = arr[j];
          j--;
       }
          arr[j+1] = key;
        }

O(N)

for (int i = 1; i < n; i++) {
    int temp = arr[i];
    int j = i - 1;

    for (; j >= 0; j--) {
        if (arr[j] > temp) {
            arr[j + 1] = arr[j];
        } else {
            break;
        }
    }

    arr[j + 1] = temp;
}
-------------------------------------------------------
Quick Sort :  BEst,Avg -> N(LogN) worst -> (NlogN)

#include <iostream>
using namespace std;

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pivot = arr[high]; // Choosing last element as pivot
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                swap(arr[i], arr[j]);
            }
        }
        swap(arr[i + 1], arr[high]);
        int pi = i + 1;

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    quickSort(arr, 0, n - 1);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";

    return 0;
}

O(NlogN)
---------------------------------------------------------
Merge Sort : best,avg,worst -> O(NlogN)

#include <iostream>
using namespace std;

void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    int leftArr[n1], rightArr[n2];

    for (int i = 0; i < n1; i++) leftArr[i] = arr[left + i];
    for (int j = 0; j < n2; j++) rightArr[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    while (i < n1) arr[k++] = leftArr[i++];
    while (j < n2) arr[k++] = rightArr[j++];
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    mergeSort(arr, 0, n - 1);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";

    return 0;
}
--------------------------------------------------
Heap Sort Best,Avg,Worst -> (NlogN)

#include <iostream>
using namespace std;

void heapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (int i = n - 1; i >= 0; i--) {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    heapSort(arr, n);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";

    return 0;
}
---------------------------------------------------------------