Q) Normalization

Reduce redundancy and improve data integrity 

1NF
2NF
3NF
BCNF

Q) ACID Properties 

ATOMICITY : All operations should be executed or none of them should be executed that is there should be a rollback mechanism 

CONSISTENCY : Whenever we r reading any value from the DB it should be up to date writing any value to the DB 
              we should always follow the integrity rule.

INTEGRITY : When two tranisition is occur it should be isolated with other.

DURABILITY : Commited changes are saved in a DB even there is a system crash or any faliure.

Q) Order by Vs Group by

Order by : Order by arrage your data or sort your data in ascending or descending order 
Group by : Aggregate or Group same values in one or more coloumns

Q) Aggregate Function :
   Perform calculation on set of values

   MIN(),MAX(),COUNT(),AVG(),SUM().

Q) JOINS :
A JOIN is used to combine rows from two or more tables based on a related column (usually a foreign key).  

 INNER JOIN :
 SELECT * FROM Employees
 INNER JOIN Departments ON Employees.dept_id = Departments.id;

LEFT JOIN :
SELECT * FROM Employees
LEFT JOIN Departments ON Employees.dept_id = Departments.id;

RIGHT JOIN :
SELECT * FROM Employees
RIGHT JOIN Departments ON Employees.dept_id = Departments.id;

 FULL JOIN :
SELECT * FROM Employees
FULL OUTER JOIN Departments ON Employees.dept_id = Departments.id;


CROSS JOIN :
SELECT * FROM Products
CROSS JOIN Categories;
Used to generate all the combination from both the tables
 (rarely used in real-world apps).


SELF JOIN:

SELECT *
FROM table1 T1, table1 T2
WHERE condition;

to compare or combine data within the same table,

Q) SUBSTRING()
SELECT SUBSTRING('HelloWorld', 1, 5);  -- Output: 'Hello'

TIME()
‚úÖ In MySQL: Extracts time part from a datetime
SELECT TIME('2024-05-24 14:35:00');  -- Output: '14:35:00'

SELECT CURRENT_TIME();   -- Output: e.g., '15:42:10'

UPPER() :
SELECT UPPER('chatgpt');  -- Output: 'CHATGPT'

) LIMIT 
LIMIT controls how many rows you get.
Used to restrict the number of rows returned by a query.

 SELECT * FROM Employees
 LIMIT 5;

OFFSET
OFFSET controls where to start from.
Used to skip a specific number of rows before starting to return results.

 SELECT * FROM Employees
 LIMIT 5 OFFSET 10;

 This skips the first 10 rows, then returns next 5 rows (i.e., rows 11 to 15).

) B B+ and AVL Tree
  
  B : Balanced multi way searched tree 
      A nodes have more than 2 childrens 
      it maintains its balance by ensuring that all the level 
      of leafe nodes are at the same level making searching,insertion,deletion more efficient.
  
  B+ : Its a varient of B tree only All the data pointers are strored at the leaf Nodes
       for faster serching and indexing.
  
  AVL Tree : A self balance binary search tree always maintain -1,0,1 height of 
             left and right subtree.



ONE SHORT :

üîπ Basics

DBMS: Software to store & manage data.
Example: MySQL, Oracle, MongoDB.

Database: Organized collection of data.
Example: Student records table in college system.

Data Models: Way to represent data.

Hierarchical ‚Üí tree (like folders in computer).

Network ‚Üí graph.

Relational ‚Üí tables (most used).

üîπ Keys in DBMS

Primary Key: Unique & not null.
Example: Roll number in student table.

Candidate Key: All possible unique identifiers.
Example: Roll number, Aadhaar number (any could be primary).

Super Key: Primary key + extra attributes.
Example: {RollNo, Name} when RollNo alone is enough.

Foreign Key: Key that links two tables.
Example: DeptID in student table referring to Dept table.

Composite Key: Combination of attributes to make it unique.
Example: {CourseID, StudentID} in Enrollment table.

üîπ Normalization

Normalization: Process to reduce redundancy & improve consistency.
Example: Instead of writing DeptName in every student row, keep Dept table separately.

Forms:

1NF: Atomic values only (no multiple values in one cell).

2NF: 1NF + no partial dependency.

3NF: 2NF + no transitive dependency.

BCNF: Stronger form of 3NF.

üîπ Transactions & Properties

Transaction: Sequence of DB operations executed as a single unit.
Example: ATM withdraw = check balance ‚Üí deduct ‚Üí dispense cash.

ACID Properties:

Atomicity: All or nothing.

Consistency: Database must stay valid.

Isolation: No interference between transactions.

Durability: Once done, stays even after crash.

üîπ Concurrency Control

Problem: Multiple transactions accessing same data ‚Üí conflicts.
Example: Two ATMs withdrawing from same account at same time.

Locks:

Shared lock ‚Üí multiple reads allowed.

Exclusive lock ‚Üí only one write allowed.

Deadlock: Two transactions waiting forever.
Example: Transaction A waiting for B, and B waiting for A.

üîπ SQL Essentials

DDL (Data Definition Language): Create/alter/drop structure.
Example: CREATE TABLE Students (...);

DML (Data Manipulation Language): Insert/update/delete data.
Example: INSERT INTO Students VALUES(...);

DCL (Data Control Language): Grant/revoke permissions.
Example: GRANT SELECT ON Students TO user1;

TCL (Transaction Control Language): Commit/rollback/savepoint.
Example: COMMIT; ROLLBACK;

üîπ Joins

INNER JOIN: Matching rows only.
Example: Students with matching DeptID.

LEFT JOIN: All from left + matching right.

RIGHT JOIN: All from right + matching left.

FULL JOIN: All records from both.

üîπ Indexing

Index: Speed up search on columns.
Example: Index on RollNo makes search faster.

Clustered Index: Alters physical table order.

Non-Clustered Index: Separate structure pointing to data.

üîπ Stored Procedures & Triggers

Stored Procedure: Saved SQL queries/functions.
Example: A procedure for monthly salary calculation.

Trigger: Auto executes on event.
Example: Auto-update stock when a new sale is recorded.

üîπ File Organization

Heap: Unordered storage.

Sequential: Sorted order.

Hashing: Fast search using hash function.

üîπ ER Model

Entity: Object in real world.
Example: Student.

Attributes: Properties.
Example: Name, RollNo.

Relationship: Link between entities.
Example: Student ‚Üí Enrolls ‚Üí Course.

üîπ Relational Algebra (Interview Favorite)

Select (œÉ): Filter rows.

Project (œÄ): Pick columns.

Join (‚®ù): Combine tables.

Union (‚à™): Add rows from two tables.

Set Difference (-): Rows in one not in other.

Cartesian Product (√ó): Combine all rows from two tables.

‚úÖ With this, we‚Äôve covered:

Basics + Keys

Normalization

Transactions (ACID)

Concurrency control

SQL + Joins + Indexing

Procedures + Triggers

File organization

ER model + Relational Algebra

That‚Äôs 90‚Äì95% of DBMS interview coverage üöÄ

üëâ Do you want me to now make a combined crash-course (OS + CN + DBMS) so you have one single sheet for revision before interviews?